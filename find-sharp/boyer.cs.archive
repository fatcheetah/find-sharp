using System.Collections.Generic;

public class LastOccurrence
{
    private readonly Dictionary<char, int> occurrences;

    public LastOccurrence(string pattern, HashSet<char> alphabet)
    {
        occurrences = new Dictionary<char, int>();
        foreach (char letter in alphabet)
        {
            int lastIndex = pattern.LastIndexOf(letter);
            occurrences[letter] = lastIndex == -1
                ? -1
                : lastIndex;
        }
    }

    public int this[char letter] => occurrences.ContainsKey(letter)
        ? occurrences[letter]
        : -1;
}


public static class BOYER
{
    private static int BoyerMooreMatch(string text, string pattern)
    {
        HashSet<char> alphabet = new(text + pattern);
        LastOccurrence last = new(pattern: pattern, alphabet: alphabet);
        int m = pattern.Length;
        int n = text.Length;
        int i = m - 1; // text index
        int j = m - 1; // pattern index

        while (i < n)
            if (text[i] == pattern[j])
            {
                if (j == 0)
                    return i;
                
                i--;
                j--;
            }
            else
            {
                int l = last[text[i]];
                i = i + m - Math.Min(val1: j, val2: 1 + l);
                j = m - 1;
            }
        return -1;
    }

    public static bool FuzzyMatch(string path, string input)
    {
        return BoyerMooreMatch(text: path, pattern: input) != -1;
    }
}